"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EscPosPrinterDiscovery = exports.EscPosPrinter = void 0;
var _reactNative = require("react-native");
const isTurboModuleEnabled = !!global.__turboModuleProxy || !!global.RN$Bridgeless;
let EscPosPrinter = exports.EscPosPrinter = void 0;
let EscPosPrinterDiscovery = exports.EscPosPrinterDiscovery = void 0;
if (isTurboModuleEnabled) {
  exports.EscPosPrinter = EscPosPrinter = require('./NativeEscPosPrinter').default;
  exports.EscPosPrinterDiscovery = EscPosPrinterDiscovery = require('./NativeEscPosPrinterDiscovery').default;
} else {
  const {
    EscPosPrinterDiscovery: OldArchEscPosPrinterDiscovery,
    EscPosPrinter: OldArchEscPosPrinter
  } = _reactNative.NativeModules;
  const DiscoveryEventEmitter = new _reactNative.NativeEventEmitter(OldArchEscPosPrinterDiscovery);
  exports.EscPosPrinterDiscovery = EscPosPrinterDiscovery = {
    ..._reactNative.NativeModules.EscPosPrinterDiscovery,
    onDiscovery: callback => {
      return DiscoveryEventEmitter.addListener('onDiscovery', callback);
    },
    ...(_reactNative.Platform.OS === 'android' ? {
      enableLocationSettingSuccess: callback => {
        return DiscoveryEventEmitter.addListener('enableLocationSettingSuccess', callback);
      },
      enableLocationSettingFailure: callback => {
        return DiscoveryEventEmitter.addListener('enableLocationSettingFailure', callback);
      }
    } : {})
  };
  exports.EscPosPrinter = EscPosPrinter = OldArchEscPosPrinter;
}
//# sourceMappingURL=index.js.map
"use strict";

function wait(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}
export function monitorPrinter(printer, listener, interval = 5000) {
  let isMonitoring = true;
  async function performMonitor() {
    await printer.addQueueTask(async () => {
      try {
        await printer.connect();
      } catch (error) {}
      const status = await printer.getStatus();
      listener(status);
      await printer.disconnect();
      return status;
    });
    await wait(interval);
    if (isMonitoring) {
      await performMonitor();
    }
  }
  performMonitor();
  return () => {
    isMonitoring = false;
  };
}
//# sourceMappingURL=monitorPrinter.js.map
"use strict";

import { NativeModules, NativeEventEmitter, Platform } from 'react-native';
const isTurboModuleEnabled = !!global.__turboModuleProxy || !!global.RN$Bridgeless;
let EscPosPrinter;
let EscPosPrinterDiscovery;
if (isTurboModuleEnabled) {
  EscPosPrinter = require('./NativeEscPosPrinter').default;
  EscPosPrinterDiscovery = require('./NativeEscPosPrinterDiscovery').default;
} else {
  const {
    EscPosPrinterDiscovery: OldArchEscPosPrinterDiscovery,
    EscPosPrinter: OldArchEscPosPrinter
  } = NativeModules;
  const DiscoveryEventEmitter = new NativeEventEmitter(OldArchEscPosPrinterDiscovery);
  EscPosPrinterDiscovery = {
    ...NativeModules.EscPosPrinterDiscovery,
    onDiscovery: callback => {
      return DiscoveryEventEmitter.addListener('onDiscovery', callback);
    },
    ...(Platform.OS === 'android' ? {
      enableLocationSettingSuccess: callback => {
        return DiscoveryEventEmitter.addListener('enableLocationSettingSuccess', callback);
      },
      enableLocationSettingFailure: callback => {
        return DiscoveryEventEmitter.addListener('enableLocationSettingFailure', callback);
      }
    } : {})
  };
  EscPosPrinter = OldArchEscPosPrinter;
}
export { EscPosPrinter, EscPosPrinterDiscovery };
//# sourceMappingURL=index.js.map
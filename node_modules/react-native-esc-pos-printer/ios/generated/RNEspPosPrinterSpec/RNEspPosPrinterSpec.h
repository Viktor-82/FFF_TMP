/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#ifndef __cplusplus
#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.
#endif

// Avoid multiple includes of RNEspPosPrinterSpec symbols
#ifndef RNEspPosPrinterSpec_H
#define RNEspPosPrinterSpec_H

#import <Foundation/Foundation.h>
#import <RCTRequired/RCTRequired.h>
#import <RCTTypeSafety/RCTConvertHelpers.h>
#import <RCTTypeSafety/RCTTypedModuleConstants.h>
#import <React/RCTBridgeModule.h>
#import <React/RCTCxxConvert.h>
#import <React/RCTManagedPointer.h>
#import <ReactCommon/RCTTurboModule.h>
#import <optional>
#import <vector>

namespace JS {
  namespace NativeEscPosPrinter {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<double> MODEL_ANK;
          RCTRequired<double> MODEL_CHINESE;
          RCTRequired<double> MODEL_TAIWAN;
          RCTRequired<double> MODEL_KOREAN;
          RCTRequired<double> MODEL_THAI;
          RCTRequired<double> MODEL_SOUTHASIA;
          RCTRequired<double> CUT_FEED;
          RCTRequired<double> CUT_NO_FEED;
          RCTRequired<double> CUT_RESERVE;
          RCTRequired<double> FULL_CUT_FEED;
          RCTRequired<double> FULL_CUT_NO_FEED;
          RCTRequired<double> FULL_CUT_RESERVE;
          RCTRequired<double> PARAM_DEFAULT;
          RCTRequired<double> PARAM_UNSPECIFIED;
          RCTRequired<double> ERR_PARAM;
          RCTRequired<double> ERR_MEMORY;
          RCTRequired<double> ERR_UNSUPPORTED;
          RCTRequired<double> ERR_FAILURE;
          RCTRequired<double> ERR_PROCESSING;
          RCTRequired<double> ERR_CONNECT;
          RCTRequired<double> ERR_TIMEOUT;
          RCTRequired<double> ERR_ILLEGAL;
          RCTRequired<double> ERR_NOT_FOUND;
          RCTRequired<double> ERR_IN_USE;
          RCTRequired<double> ERR_TYPE_INVALID;
          RCTRequired<double> ERR_RECOVERY_FAILURE;
          RCTRequired<double> ERR_DISCONNECT;
          RCTRequired<double> ERR_INIT;
          RCTRequired<double> CODE_ERR_AUTORECOVER;
          RCTRequired<double> CODE_ERR_COVER_OPEN;
          RCTRequired<double> CODE_ERR_CUTTER;
          RCTRequired<double> CODE_ERR_MECHANICAL;
          RCTRequired<double> CODE_ERR_EMPTY;
          RCTRequired<double> CODE_ERR_UNRECOVERABLE;
          RCTRequired<double> CODE_ERR_FAILURE;
          RCTRequired<double> CODE_ERR_NOT_FOUND;
          RCTRequired<double> CODE_ERR_SYSTEM;
          RCTRequired<double> CODE_ERR_PORT;
          RCTRequired<double> CODE_ERR_TIMEOUT;
          RCTRequired<double> CODE_ERR_JOB_NOT_FOUND;
          RCTRequired<double> CODE_ERR_SPOOLER;
          RCTRequired<double> CODE_ERR_BATTERY_LOW;
          RCTRequired<double> CODE_ERR_TOO_MANY_REQUESTS;
          RCTRequired<double> CODE_ERR_REQUEST_ENTITY_TOO_LARGE;
          RCTRequired<double> CODE_ERR_WAIT_REMOVAL;
          RCTRequired<double> CODE_PRINTING;
          RCTRequired<double> CODE_ERR_PARAM;
          RCTRequired<double> CODE_ERR_MEMORY;
          RCTRequired<double> CODE_ERR_PROCESSING;
          RCTRequired<double> CODE_ERR_ILLEGAL;
          RCTRequired<double> CODE_ERR_DEVICE_BUSY;
          RCTRequired<double> PRINTER_SETTING_PAPERWIDTH;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED;
          RCTRequired<double> PRINTER_SETTING_PAPERWIDTH58_0;
          RCTRequired<double> PRINTER_SETTING_PAPERWIDTH60_0;
          RCTRequired<double> PRINTER_SETTING_PAPERWIDTH70_0;
          RCTRequired<double> PRINTER_SETTING_PAPERWIDTH76_0;
          RCTRequired<double> PRINTER_SETTING_PAPERWIDTH80_0;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITYDIP;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY70;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY75;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY80;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY85;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY90;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY95;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY100;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY105;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY110;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY115;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY120;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY125;
          RCTRequired<double> PRINTER_SETTING_PRINTDENSITY130;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED1;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED2;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED3;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED4;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED5;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED6;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED7;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED8;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED9;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED10;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED11;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED12;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED13;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED14;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED15;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED16;
          RCTRequired<double> PRINTER_SETTING_PRINTSPEED17;
          RCTRequired<double> PRINTER_TRUE;
          RCTRequired<double> PRINTER_FALSE;
          RCTRequired<double> UNKNOWN;
          RCTRequired<double> PAPER_OK;
          RCTRequired<double> PAPER_NEAR_END;
          RCTRequired<double> PAPER_EMPTY;
          RCTRequired<double> SWITCH_ON;
          RCTRequired<double> SWITCH_OFF;
          RCTRequired<double> DRAWER_HIGH;
          RCTRequired<double> DRAWER_LOW;
          RCTRequired<double> NO_ERR;
          RCTRequired<double> MECHANICAL_ERR;
          RCTRequired<double> AUTOCUTTER_ERR;
          RCTRequired<double> UNRECOVER_ERR;
          RCTRequired<double> AUTORECOVER_ERR;
          RCTRequired<double> HEAD_OVERHEAT;
          RCTRequired<double> MOTOR_OVERHEAT;
          RCTRequired<double> BATTERY_OVERHEAT;
          RCTRequired<double> WRONG_PAPER;
          RCTRequired<double> COVER_OPEN;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_6;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_5;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_4;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_3;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_2;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_1;
          RCTRequired<double> EPOS2_BATTERY_LEVEL_0;
          RCTRequired<double> REMOVAL_WAIT_PAPER;
          RCTRequired<double> REMOVAL_WAIT_NONE;
          RCTRequired<double> REMOVAL_DETECT_PAPER;
          RCTRequired<double> REMOVAL_DETECT_PAPER_NONE;
          RCTRequired<double> REMOVAL_DETECT_UNKNOWN;
          RCTRequired<double> HIGH_VOLTAGE_ERR;
          RCTRequired<double> LOW_VOLTAGE_ERR;
          RCTRequired<double> COLOR_NONE;
          RCTRequired<double> COLOR_1;
          RCTRequired<double> COLOR_2;
          RCTRequired<double> COLOR_3;
          RCTRequired<double> COLOR_4;
          RCTRequired<double> MODE_MONO;
          RCTRequired<double> MODE_GRAY16;
          RCTRequired<double> MODE_MONO_HIGH_DENSITY;
          RCTRequired<double> HALFTONE_DITHER;
          RCTRequired<double> HALFTONE_ERROR_DIFFUSION;
          RCTRequired<double> HALFTONE_THRESHOLD;
          RCTRequired<double> COMPRESS_DEFLATE;
          RCTRequired<double> COMPRESS_NONE;
          RCTRequired<double> COMPRESS_AUTO;
          RCTRequired<double> BARCODE_UPC_A;
          RCTRequired<double> BARCODE_UPC_E;
          RCTRequired<double> BARCODE_EAN13;
          RCTRequired<double> BARCODE_JAN13;
          RCTRequired<double> BARCODE_EAN8;
          RCTRequired<double> BARCODE_JAN8;
          RCTRequired<double> BARCODE_CODE39;
          RCTRequired<double> BARCODE_ITF;
          RCTRequired<double> BARCODE_CODABAR;
          RCTRequired<double> BARCODE_CODE93;
          RCTRequired<double> BARCODE_CODE128;
          RCTRequired<double> BARCODE_CODE128_AUTO;
          RCTRequired<double> BARCODE_GS1_128;
          RCTRequired<double> BARCODE_GS1_DATABAR_OMNIDIRECTIONAL;
          RCTRequired<double> BARCODE_GS1_DATABAR_TRUNCATED;
          RCTRequired<double> BARCODE_GS1_DATABAR_LIMITED;
          RCTRequired<double> BARCODE_GS1_DATABAR_EXPANDED;
          RCTRequired<double> HRI_NONE;
          RCTRequired<double> HRI_ABOVE;
          RCTRequired<double> HRI_BELOW;
          RCTRequired<double> HRI_BOTH;
          RCTRequired<double> FONT_A;
          RCTRequired<double> FONT_B;
          RCTRequired<double> FONT_C;
          RCTRequired<double> FONT_D;
          RCTRequired<double> FONT_E;
          RCTRequired<double> SYMBOL_PDF417_STANDARD;
          RCTRequired<double> SYMBOL_PDF417_TRUNCATED;
          RCTRequired<double> SYMBOL_QRCODE_MODEL_1;
          RCTRequired<double> SYMBOL_QRCODE_MODEL_2;
          RCTRequired<double> SYMBOL_QRCODE_MICRO;
          RCTRequired<double> SYMBOL_MAXICODE_MODE_2;
          RCTRequired<double> SYMBOL_MAXICODE_MODE_3;
          RCTRequired<double> SYMBOL_MAXICODE_MODE_4;
          RCTRequired<double> SYMBOL_MAXICODE_MODE_5;
          RCTRequired<double> SYMBOL_MAXICODE_MODE_6;
          RCTRequired<double> SYMBOL_GS1_DATABAR_STACKED;
          RCTRequired<double> SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL;
          RCTRequired<double> SYMBOL_GS1_DATABAR_EXPANDED_STACKED;
          RCTRequired<double> SYMBOL_AZTECCODE_FULLRANGE;
          RCTRequired<double> SYMBOL_AZTECCODE_COMPACT;
          RCTRequired<double> SYMBOL_DATAMATRIX_SQUARE;
          RCTRequired<double> SYMBOL_DATAMATRIX_RECTANGLE_8;
          RCTRequired<double> SYMBOL_DATAMATRIX_RECTANGLE_12;
          RCTRequired<double> SYMBOL_DATAMATRIX_RECTANGLE_16;
          RCTRequired<double> LEVEL_0;
          RCTRequired<double> LEVEL_1;
          RCTRequired<double> LEVEL_2;
          RCTRequired<double> LEVEL_3;
          RCTRequired<double> LEVEL_4;
          RCTRequired<double> LEVEL_5;
          RCTRequired<double> LEVEL_6;
          RCTRequired<double> LEVEL_7;
          RCTRequired<double> LEVEL_8;
          RCTRequired<double> LEVEL_L;
          RCTRequired<double> LEVEL_M;
          RCTRequired<double> LEVEL_Q;
          RCTRequired<double> LEVEL_H;
          RCTRequired<double> DRAWER_2PIN;
          RCTRequired<double> DRAWER_5PIN;
          RCTRequired<double> PULSE_100;
          RCTRequired<double> PULSE_200;
          RCTRequired<double> PULSE_300;
          RCTRequired<double> PULSE_400;
          RCTRequired<double> PULSE_500;
          RCTRequired<double> ALIGN_LEFT;
          RCTRequired<double> ALIGN_CENTER;
          RCTRequired<double> ALIGN_RIGHT;
          RCTRequired<double> LANG_EN;
          RCTRequired<double> LANG_JA;
          RCTRequired<double> LANG_ZH_CN;
          RCTRequired<double> LANG_ZH_TW;
          RCTRequired<double> LANG_KO;
          RCTRequired<double> LANG_TH;
          RCTRequired<double> LANG_VI;
          RCTRequired<double> LANG_MULTI;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeEscPosPrinterSpec <RCTBridgeModule, RCTTurboModule>

- (void)initWithPrinterDeviceName:(NSString *)target
                       deviceName:(NSString *)deviceName
                             lang:(double)lang
                          resolve:(RCTPromiseResolveBlock)resolve
                           reject:(RCTPromiseRejectBlock)reject;
- (void)connect:(NSString *)target
        timeout:(double)timeout
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)disconnect:(NSString *)target
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)clearCommandBuffer:(NSString *)target
                   resolve:(RCTPromiseResolveBlock)resolve
                    reject:(RCTPromiseRejectBlock)reject;
- (void)addText:(NSString *)target
           data:(NSString *)data
        resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject;
- (void)addTextLang:(NSString *)target
               lang:(double)lang
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)addFeedLine:(NSString *)target
               line:(double)line
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)addLineSpace:(NSString *)target
             linespc:(double)linespc
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)addCut:(NSString *)target
          type:(double)type
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject;
- (void)sendData:(NSString *)target
         timeout:(double)timeout
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)getPrinterSetting:(NSString *)target
                  timeout:(double)timeout
                     type:(double)type
                  resolve:(RCTPromiseResolveBlock)resolve
                   reject:(RCTPromiseRejectBlock)reject;
- (void)getStatus:(NSString *)target
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addImage:(NSString *)target
          source:(NSDictionary *)source
           width:(double)width
           color:(double)color
            mode:(double)mode
        halftone:(double)halftone
      brightness:(double)brightness
        compress:(double)compress
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)addBarcode:(NSString *)target
              data:(NSString *)data
              type:(double)type
               hri:(double)hri
              font:(double)font
             width:(double)width
            height:(double)height
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)addSymbol:(NSString *)target
             data:(NSString *)data
             type:(double)type
            level:(double)level
            width:(double)width
           height:(double)height
             size:(double)size
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject;
- (void)addCommand:(NSString *)target
              data:(NSString *)data
           resolve:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject;
- (void)addPulse:(NSString *)target
          drawer:(double)drawer
            time:(double)time
         resolve:(RCTPromiseResolveBlock)resolve
          reject:(RCTPromiseRejectBlock)reject;
- (void)addTextAlign:(NSString *)target
               align:(double)align
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (void)addTextSize:(NSString *)target
              width:(double)width
             height:(double)height
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject;
- (void)addTextSmooth:(NSString *)target
               smooth:(double)smooth
              resolve:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)addTextStyle:(NSString *)target
             reverse:(double)reverse
                  ul:(double)ul
                  em:(double)em
               color:(double)color
             resolve:(RCTPromiseResolveBlock)resolve
              reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeEscPosPrinter::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeEscPosPrinter::Constants::Builder>)getConstants;

@end

@interface NativeEscPosPrinterSpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;


@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeEscPosPrinter'
   */
  class JSI_EXPORT NativeEscPosPrinterSpecJSI : public ObjCTurboModule {
  public:
    NativeEscPosPrinterSpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
namespace JS {
  namespace NativeEscPosPrinterDiscovery {
    struct Constants {

      struct Builder {
        struct Input {
          RCTRequired<double> PORTTYPE_ALL;
          RCTRequired<double> PORTTYPE_TCP;
          RCTRequired<double> PORTTYPE_BLUETOOTH;
          RCTRequired<double> PORTTYPE_USB;
          RCTRequired<double> PORTTYPE_BLUETOOTH_LE;
          RCTRequired<double> MODEL_ALL;
          RCTRequired<double> TYPE_ALL;
          RCTRequired<double> TYPE_PRINTER;
          RCTRequired<double> TYPE_HYBRID_PRINTER;
          RCTRequired<double> TYPE_DISPLAY;
          RCTRequired<double> TYPE_KEYBOARD;
          RCTRequired<double> TYPE_SCANNER;
          RCTRequired<double> TYPE_SERIAL;
          RCTRequired<double> TYPE_POS_KEYBOARD;
          RCTRequired<double> TYPE_MSR;
          RCTRequired<double> TYPE_GFE;
          RCTRequired<double> TYPE_OTHER_PERIPHERAL;
          RCTRequired<double> ERR_PARAM;
          RCTRequired<double> ERR_ILLEGAL;
          RCTRequired<double> ERR_MEMORY;
          RCTRequired<double> ERR_FAILURE;
          RCTRequired<double> ERR_PROCESSING;
          RCTRequired<double> BT_ERR_PARAM;
          RCTRequired<double> BT_ERR_UNSUPPORTED;
          RCTRequired<double> BT_ERR_CANCEL;
          RCTRequired<double> BT_ERR_ILLEGAL_DEVICE;
          RCTRequired<double> FILTER_NONE;
          RCTRequired<double> FILTER_NAME;
          RCTRequired<double> PRINTER_TRUE;
          RCTRequired<double> PRINTER_FALSE;
        };

        /** Initialize with a set of values */
        Builder(const Input i);
        /** Initialize with an existing Constants */
        Builder(Constants i);
        /** Builds the object. Generally used only by the infrastructure. */
        NSDictionary *buildUnsafeRawValue() const { return _factory(); };
      private:
        NSDictionary *(^_factory)(void);
      };

      static Constants fromUnsafeRawValue(NSDictionary *const v) { return {v}; }
      NSDictionary *unsafeRawValue() const { return _v; }
    private:
      Constants(NSDictionary *const v) : _v(v) {}
      NSDictionary *_v;
    };
  }
}
@protocol NativeEscPosPrinterDiscoverySpec <RCTBridgeModule, RCTTurboModule>

- (void)startDiscovery:(NSDictionary *)filterOption
               resolve:(RCTPromiseResolveBlock)resolve
                reject:(RCTPromiseRejectBlock)reject;
- (void)stopDiscovery:(RCTPromiseResolveBlock)resolve
               reject:(RCTPromiseRejectBlock)reject;
- (void)enableLocationSetting:(RCTPromiseResolveBlock)resolve
                       reject:(RCTPromiseRejectBlock)reject;
- (void)pairBluetoothDevice:(NSString *)macAddress
                    resolve:(RCTPromiseResolveBlock)resolve
                     reject:(RCTPromiseRejectBlock)reject;
- (facebook::react::ModuleConstants<JS::NativeEscPosPrinterDiscovery::Constants::Builder>)constantsToExport;
- (facebook::react::ModuleConstants<JS::NativeEscPosPrinterDiscovery::Constants::Builder>)getConstants;

@end

@interface NativeEscPosPrinterDiscoverySpecBase : NSObject {
@protected
facebook::react::EventEmitterCallback _eventEmitterCallback;
}
- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper;

- (void)emitOnDiscovery:(NSArray<id<NSObject>> *)value;
- (void)emitEnableLocationSettingSuccess;
- (void)emitEnableLocationSettingFailure;
@end

namespace facebook::react {
  /**
   * ObjC++ class for module 'NativeEscPosPrinterDiscovery'
   */
  class JSI_EXPORT NativeEscPosPrinterDiscoverySpecJSI : public ObjCTurboModule {
  public:
    NativeEscPosPrinterDiscoverySpecJSI(const ObjCTurboModule::InitParams &params);
  };
} // namespace facebook::react
inline JS::NativeEscPosPrinter::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto MODEL_ANK = i.MODEL_ANK.get();
  d[@"MODEL_ANK"] = @(MODEL_ANK);
  auto MODEL_CHINESE = i.MODEL_CHINESE.get();
  d[@"MODEL_CHINESE"] = @(MODEL_CHINESE);
  auto MODEL_TAIWAN = i.MODEL_TAIWAN.get();
  d[@"MODEL_TAIWAN"] = @(MODEL_TAIWAN);
  auto MODEL_KOREAN = i.MODEL_KOREAN.get();
  d[@"MODEL_KOREAN"] = @(MODEL_KOREAN);
  auto MODEL_THAI = i.MODEL_THAI.get();
  d[@"MODEL_THAI"] = @(MODEL_THAI);
  auto MODEL_SOUTHASIA = i.MODEL_SOUTHASIA.get();
  d[@"MODEL_SOUTHASIA"] = @(MODEL_SOUTHASIA);
  auto CUT_FEED = i.CUT_FEED.get();
  d[@"CUT_FEED"] = @(CUT_FEED);
  auto CUT_NO_FEED = i.CUT_NO_FEED.get();
  d[@"CUT_NO_FEED"] = @(CUT_NO_FEED);
  auto CUT_RESERVE = i.CUT_RESERVE.get();
  d[@"CUT_RESERVE"] = @(CUT_RESERVE);
  auto FULL_CUT_FEED = i.FULL_CUT_FEED.get();
  d[@"FULL_CUT_FEED"] = @(FULL_CUT_FEED);
  auto FULL_CUT_NO_FEED = i.FULL_CUT_NO_FEED.get();
  d[@"FULL_CUT_NO_FEED"] = @(FULL_CUT_NO_FEED);
  auto FULL_CUT_RESERVE = i.FULL_CUT_RESERVE.get();
  d[@"FULL_CUT_RESERVE"] = @(FULL_CUT_RESERVE);
  auto PARAM_DEFAULT = i.PARAM_DEFAULT.get();
  d[@"PARAM_DEFAULT"] = @(PARAM_DEFAULT);
  auto PARAM_UNSPECIFIED = i.PARAM_UNSPECIFIED.get();
  d[@"PARAM_UNSPECIFIED"] = @(PARAM_UNSPECIFIED);
  auto ERR_PARAM = i.ERR_PARAM.get();
  d[@"ERR_PARAM"] = @(ERR_PARAM);
  auto ERR_MEMORY = i.ERR_MEMORY.get();
  d[@"ERR_MEMORY"] = @(ERR_MEMORY);
  auto ERR_UNSUPPORTED = i.ERR_UNSUPPORTED.get();
  d[@"ERR_UNSUPPORTED"] = @(ERR_UNSUPPORTED);
  auto ERR_FAILURE = i.ERR_FAILURE.get();
  d[@"ERR_FAILURE"] = @(ERR_FAILURE);
  auto ERR_PROCESSING = i.ERR_PROCESSING.get();
  d[@"ERR_PROCESSING"] = @(ERR_PROCESSING);
  auto ERR_CONNECT = i.ERR_CONNECT.get();
  d[@"ERR_CONNECT"] = @(ERR_CONNECT);
  auto ERR_TIMEOUT = i.ERR_TIMEOUT.get();
  d[@"ERR_TIMEOUT"] = @(ERR_TIMEOUT);
  auto ERR_ILLEGAL = i.ERR_ILLEGAL.get();
  d[@"ERR_ILLEGAL"] = @(ERR_ILLEGAL);
  auto ERR_NOT_FOUND = i.ERR_NOT_FOUND.get();
  d[@"ERR_NOT_FOUND"] = @(ERR_NOT_FOUND);
  auto ERR_IN_USE = i.ERR_IN_USE.get();
  d[@"ERR_IN_USE"] = @(ERR_IN_USE);
  auto ERR_TYPE_INVALID = i.ERR_TYPE_INVALID.get();
  d[@"ERR_TYPE_INVALID"] = @(ERR_TYPE_INVALID);
  auto ERR_RECOVERY_FAILURE = i.ERR_RECOVERY_FAILURE.get();
  d[@"ERR_RECOVERY_FAILURE"] = @(ERR_RECOVERY_FAILURE);
  auto ERR_DISCONNECT = i.ERR_DISCONNECT.get();
  d[@"ERR_DISCONNECT"] = @(ERR_DISCONNECT);
  auto ERR_INIT = i.ERR_INIT.get();
  d[@"ERR_INIT"] = @(ERR_INIT);
  auto CODE_ERR_AUTORECOVER = i.CODE_ERR_AUTORECOVER.get();
  d[@"CODE_ERR_AUTORECOVER"] = @(CODE_ERR_AUTORECOVER);
  auto CODE_ERR_COVER_OPEN = i.CODE_ERR_COVER_OPEN.get();
  d[@"CODE_ERR_COVER_OPEN"] = @(CODE_ERR_COVER_OPEN);
  auto CODE_ERR_CUTTER = i.CODE_ERR_CUTTER.get();
  d[@"CODE_ERR_CUTTER"] = @(CODE_ERR_CUTTER);
  auto CODE_ERR_MECHANICAL = i.CODE_ERR_MECHANICAL.get();
  d[@"CODE_ERR_MECHANICAL"] = @(CODE_ERR_MECHANICAL);
  auto CODE_ERR_EMPTY = i.CODE_ERR_EMPTY.get();
  d[@"CODE_ERR_EMPTY"] = @(CODE_ERR_EMPTY);
  auto CODE_ERR_UNRECOVERABLE = i.CODE_ERR_UNRECOVERABLE.get();
  d[@"CODE_ERR_UNRECOVERABLE"] = @(CODE_ERR_UNRECOVERABLE);
  auto CODE_ERR_FAILURE = i.CODE_ERR_FAILURE.get();
  d[@"CODE_ERR_FAILURE"] = @(CODE_ERR_FAILURE);
  auto CODE_ERR_NOT_FOUND = i.CODE_ERR_NOT_FOUND.get();
  d[@"CODE_ERR_NOT_FOUND"] = @(CODE_ERR_NOT_FOUND);
  auto CODE_ERR_SYSTEM = i.CODE_ERR_SYSTEM.get();
  d[@"CODE_ERR_SYSTEM"] = @(CODE_ERR_SYSTEM);
  auto CODE_ERR_PORT = i.CODE_ERR_PORT.get();
  d[@"CODE_ERR_PORT"] = @(CODE_ERR_PORT);
  auto CODE_ERR_TIMEOUT = i.CODE_ERR_TIMEOUT.get();
  d[@"CODE_ERR_TIMEOUT"] = @(CODE_ERR_TIMEOUT);
  auto CODE_ERR_JOB_NOT_FOUND = i.CODE_ERR_JOB_NOT_FOUND.get();
  d[@"CODE_ERR_JOB_NOT_FOUND"] = @(CODE_ERR_JOB_NOT_FOUND);
  auto CODE_ERR_SPOOLER = i.CODE_ERR_SPOOLER.get();
  d[@"CODE_ERR_SPOOLER"] = @(CODE_ERR_SPOOLER);
  auto CODE_ERR_BATTERY_LOW = i.CODE_ERR_BATTERY_LOW.get();
  d[@"CODE_ERR_BATTERY_LOW"] = @(CODE_ERR_BATTERY_LOW);
  auto CODE_ERR_TOO_MANY_REQUESTS = i.CODE_ERR_TOO_MANY_REQUESTS.get();
  d[@"CODE_ERR_TOO_MANY_REQUESTS"] = @(CODE_ERR_TOO_MANY_REQUESTS);
  auto CODE_ERR_REQUEST_ENTITY_TOO_LARGE = i.CODE_ERR_REQUEST_ENTITY_TOO_LARGE.get();
  d[@"CODE_ERR_REQUEST_ENTITY_TOO_LARGE"] = @(CODE_ERR_REQUEST_ENTITY_TOO_LARGE);
  auto CODE_ERR_WAIT_REMOVAL = i.CODE_ERR_WAIT_REMOVAL.get();
  d[@"CODE_ERR_WAIT_REMOVAL"] = @(CODE_ERR_WAIT_REMOVAL);
  auto CODE_PRINTING = i.CODE_PRINTING.get();
  d[@"CODE_PRINTING"] = @(CODE_PRINTING);
  auto CODE_ERR_PARAM = i.CODE_ERR_PARAM.get();
  d[@"CODE_ERR_PARAM"] = @(CODE_ERR_PARAM);
  auto CODE_ERR_MEMORY = i.CODE_ERR_MEMORY.get();
  d[@"CODE_ERR_MEMORY"] = @(CODE_ERR_MEMORY);
  auto CODE_ERR_PROCESSING = i.CODE_ERR_PROCESSING.get();
  d[@"CODE_ERR_PROCESSING"] = @(CODE_ERR_PROCESSING);
  auto CODE_ERR_ILLEGAL = i.CODE_ERR_ILLEGAL.get();
  d[@"CODE_ERR_ILLEGAL"] = @(CODE_ERR_ILLEGAL);
  auto CODE_ERR_DEVICE_BUSY = i.CODE_ERR_DEVICE_BUSY.get();
  d[@"CODE_ERR_DEVICE_BUSY"] = @(CODE_ERR_DEVICE_BUSY);
  auto PRINTER_SETTING_PAPERWIDTH = i.PRINTER_SETTING_PAPERWIDTH.get();
  d[@"PRINTER_SETTING_PAPERWIDTH"] = @(PRINTER_SETTING_PAPERWIDTH);
  auto PRINTER_SETTING_PRINTDENSITY = i.PRINTER_SETTING_PRINTDENSITY.get();
  d[@"PRINTER_SETTING_PRINTDENSITY"] = @(PRINTER_SETTING_PRINTDENSITY);
  auto PRINTER_SETTING_PRINTSPEED = i.PRINTER_SETTING_PRINTSPEED.get();
  d[@"PRINTER_SETTING_PRINTSPEED"] = @(PRINTER_SETTING_PRINTSPEED);
  auto PRINTER_SETTING_PAPERWIDTH58_0 = i.PRINTER_SETTING_PAPERWIDTH58_0.get();
  d[@"PRINTER_SETTING_PAPERWIDTH58_0"] = @(PRINTER_SETTING_PAPERWIDTH58_0);
  auto PRINTER_SETTING_PAPERWIDTH60_0 = i.PRINTER_SETTING_PAPERWIDTH60_0.get();
  d[@"PRINTER_SETTING_PAPERWIDTH60_0"] = @(PRINTER_SETTING_PAPERWIDTH60_0);
  auto PRINTER_SETTING_PAPERWIDTH70_0 = i.PRINTER_SETTING_PAPERWIDTH70_0.get();
  d[@"PRINTER_SETTING_PAPERWIDTH70_0"] = @(PRINTER_SETTING_PAPERWIDTH70_0);
  auto PRINTER_SETTING_PAPERWIDTH76_0 = i.PRINTER_SETTING_PAPERWIDTH76_0.get();
  d[@"PRINTER_SETTING_PAPERWIDTH76_0"] = @(PRINTER_SETTING_PAPERWIDTH76_0);
  auto PRINTER_SETTING_PAPERWIDTH80_0 = i.PRINTER_SETTING_PAPERWIDTH80_0.get();
  d[@"PRINTER_SETTING_PAPERWIDTH80_0"] = @(PRINTER_SETTING_PAPERWIDTH80_0);
  auto PRINTER_SETTING_PRINTDENSITYDIP = i.PRINTER_SETTING_PRINTDENSITYDIP.get();
  d[@"PRINTER_SETTING_PRINTDENSITYDIP"] = @(PRINTER_SETTING_PRINTDENSITYDIP);
  auto PRINTER_SETTING_PRINTDENSITY70 = i.PRINTER_SETTING_PRINTDENSITY70.get();
  d[@"PRINTER_SETTING_PRINTDENSITY70"] = @(PRINTER_SETTING_PRINTDENSITY70);
  auto PRINTER_SETTING_PRINTDENSITY75 = i.PRINTER_SETTING_PRINTDENSITY75.get();
  d[@"PRINTER_SETTING_PRINTDENSITY75"] = @(PRINTER_SETTING_PRINTDENSITY75);
  auto PRINTER_SETTING_PRINTDENSITY80 = i.PRINTER_SETTING_PRINTDENSITY80.get();
  d[@"PRINTER_SETTING_PRINTDENSITY80"] = @(PRINTER_SETTING_PRINTDENSITY80);
  auto PRINTER_SETTING_PRINTDENSITY85 = i.PRINTER_SETTING_PRINTDENSITY85.get();
  d[@"PRINTER_SETTING_PRINTDENSITY85"] = @(PRINTER_SETTING_PRINTDENSITY85);
  auto PRINTER_SETTING_PRINTDENSITY90 = i.PRINTER_SETTING_PRINTDENSITY90.get();
  d[@"PRINTER_SETTING_PRINTDENSITY90"] = @(PRINTER_SETTING_PRINTDENSITY90);
  auto PRINTER_SETTING_PRINTDENSITY95 = i.PRINTER_SETTING_PRINTDENSITY95.get();
  d[@"PRINTER_SETTING_PRINTDENSITY95"] = @(PRINTER_SETTING_PRINTDENSITY95);
  auto PRINTER_SETTING_PRINTDENSITY100 = i.PRINTER_SETTING_PRINTDENSITY100.get();
  d[@"PRINTER_SETTING_PRINTDENSITY100"] = @(PRINTER_SETTING_PRINTDENSITY100);
  auto PRINTER_SETTING_PRINTDENSITY105 = i.PRINTER_SETTING_PRINTDENSITY105.get();
  d[@"PRINTER_SETTING_PRINTDENSITY105"] = @(PRINTER_SETTING_PRINTDENSITY105);
  auto PRINTER_SETTING_PRINTDENSITY110 = i.PRINTER_SETTING_PRINTDENSITY110.get();
  d[@"PRINTER_SETTING_PRINTDENSITY110"] = @(PRINTER_SETTING_PRINTDENSITY110);
  auto PRINTER_SETTING_PRINTDENSITY115 = i.PRINTER_SETTING_PRINTDENSITY115.get();
  d[@"PRINTER_SETTING_PRINTDENSITY115"] = @(PRINTER_SETTING_PRINTDENSITY115);
  auto PRINTER_SETTING_PRINTDENSITY120 = i.PRINTER_SETTING_PRINTDENSITY120.get();
  d[@"PRINTER_SETTING_PRINTDENSITY120"] = @(PRINTER_SETTING_PRINTDENSITY120);
  auto PRINTER_SETTING_PRINTDENSITY125 = i.PRINTER_SETTING_PRINTDENSITY125.get();
  d[@"PRINTER_SETTING_PRINTDENSITY125"] = @(PRINTER_SETTING_PRINTDENSITY125);
  auto PRINTER_SETTING_PRINTDENSITY130 = i.PRINTER_SETTING_PRINTDENSITY130.get();
  d[@"PRINTER_SETTING_PRINTDENSITY130"] = @(PRINTER_SETTING_PRINTDENSITY130);
  auto PRINTER_SETTING_PRINTSPEED1 = i.PRINTER_SETTING_PRINTSPEED1.get();
  d[@"PRINTER_SETTING_PRINTSPEED1"] = @(PRINTER_SETTING_PRINTSPEED1);
  auto PRINTER_SETTING_PRINTSPEED2 = i.PRINTER_SETTING_PRINTSPEED2.get();
  d[@"PRINTER_SETTING_PRINTSPEED2"] = @(PRINTER_SETTING_PRINTSPEED2);
  auto PRINTER_SETTING_PRINTSPEED3 = i.PRINTER_SETTING_PRINTSPEED3.get();
  d[@"PRINTER_SETTING_PRINTSPEED3"] = @(PRINTER_SETTING_PRINTSPEED3);
  auto PRINTER_SETTING_PRINTSPEED4 = i.PRINTER_SETTING_PRINTSPEED4.get();
  d[@"PRINTER_SETTING_PRINTSPEED4"] = @(PRINTER_SETTING_PRINTSPEED4);
  auto PRINTER_SETTING_PRINTSPEED5 = i.PRINTER_SETTING_PRINTSPEED5.get();
  d[@"PRINTER_SETTING_PRINTSPEED5"] = @(PRINTER_SETTING_PRINTSPEED5);
  auto PRINTER_SETTING_PRINTSPEED6 = i.PRINTER_SETTING_PRINTSPEED6.get();
  d[@"PRINTER_SETTING_PRINTSPEED6"] = @(PRINTER_SETTING_PRINTSPEED6);
  auto PRINTER_SETTING_PRINTSPEED7 = i.PRINTER_SETTING_PRINTSPEED7.get();
  d[@"PRINTER_SETTING_PRINTSPEED7"] = @(PRINTER_SETTING_PRINTSPEED7);
  auto PRINTER_SETTING_PRINTSPEED8 = i.PRINTER_SETTING_PRINTSPEED8.get();
  d[@"PRINTER_SETTING_PRINTSPEED8"] = @(PRINTER_SETTING_PRINTSPEED8);
  auto PRINTER_SETTING_PRINTSPEED9 = i.PRINTER_SETTING_PRINTSPEED9.get();
  d[@"PRINTER_SETTING_PRINTSPEED9"] = @(PRINTER_SETTING_PRINTSPEED9);
  auto PRINTER_SETTING_PRINTSPEED10 = i.PRINTER_SETTING_PRINTSPEED10.get();
  d[@"PRINTER_SETTING_PRINTSPEED10"] = @(PRINTER_SETTING_PRINTSPEED10);
  auto PRINTER_SETTING_PRINTSPEED11 = i.PRINTER_SETTING_PRINTSPEED11.get();
  d[@"PRINTER_SETTING_PRINTSPEED11"] = @(PRINTER_SETTING_PRINTSPEED11);
  auto PRINTER_SETTING_PRINTSPEED12 = i.PRINTER_SETTING_PRINTSPEED12.get();
  d[@"PRINTER_SETTING_PRINTSPEED12"] = @(PRINTER_SETTING_PRINTSPEED12);
  auto PRINTER_SETTING_PRINTSPEED13 = i.PRINTER_SETTING_PRINTSPEED13.get();
  d[@"PRINTER_SETTING_PRINTSPEED13"] = @(PRINTER_SETTING_PRINTSPEED13);
  auto PRINTER_SETTING_PRINTSPEED14 = i.PRINTER_SETTING_PRINTSPEED14.get();
  d[@"PRINTER_SETTING_PRINTSPEED14"] = @(PRINTER_SETTING_PRINTSPEED14);
  auto PRINTER_SETTING_PRINTSPEED15 = i.PRINTER_SETTING_PRINTSPEED15.get();
  d[@"PRINTER_SETTING_PRINTSPEED15"] = @(PRINTER_SETTING_PRINTSPEED15);
  auto PRINTER_SETTING_PRINTSPEED16 = i.PRINTER_SETTING_PRINTSPEED16.get();
  d[@"PRINTER_SETTING_PRINTSPEED16"] = @(PRINTER_SETTING_PRINTSPEED16);
  auto PRINTER_SETTING_PRINTSPEED17 = i.PRINTER_SETTING_PRINTSPEED17.get();
  d[@"PRINTER_SETTING_PRINTSPEED17"] = @(PRINTER_SETTING_PRINTSPEED17);
  auto PRINTER_TRUE = i.PRINTER_TRUE.get();
  d[@"PRINTER_TRUE"] = @(PRINTER_TRUE);
  auto PRINTER_FALSE = i.PRINTER_FALSE.get();
  d[@"PRINTER_FALSE"] = @(PRINTER_FALSE);
  auto UNKNOWN = i.UNKNOWN.get();
  d[@"UNKNOWN"] = @(UNKNOWN);
  auto PAPER_OK = i.PAPER_OK.get();
  d[@"PAPER_OK"] = @(PAPER_OK);
  auto PAPER_NEAR_END = i.PAPER_NEAR_END.get();
  d[@"PAPER_NEAR_END"] = @(PAPER_NEAR_END);
  auto PAPER_EMPTY = i.PAPER_EMPTY.get();
  d[@"PAPER_EMPTY"] = @(PAPER_EMPTY);
  auto SWITCH_ON = i.SWITCH_ON.get();
  d[@"SWITCH_ON"] = @(SWITCH_ON);
  auto SWITCH_OFF = i.SWITCH_OFF.get();
  d[@"SWITCH_OFF"] = @(SWITCH_OFF);
  auto DRAWER_HIGH = i.DRAWER_HIGH.get();
  d[@"DRAWER_HIGH"] = @(DRAWER_HIGH);
  auto DRAWER_LOW = i.DRAWER_LOW.get();
  d[@"DRAWER_LOW"] = @(DRAWER_LOW);
  auto NO_ERR = i.NO_ERR.get();
  d[@"NO_ERR"] = @(NO_ERR);
  auto MECHANICAL_ERR = i.MECHANICAL_ERR.get();
  d[@"MECHANICAL_ERR"] = @(MECHANICAL_ERR);
  auto AUTOCUTTER_ERR = i.AUTOCUTTER_ERR.get();
  d[@"AUTOCUTTER_ERR"] = @(AUTOCUTTER_ERR);
  auto UNRECOVER_ERR = i.UNRECOVER_ERR.get();
  d[@"UNRECOVER_ERR"] = @(UNRECOVER_ERR);
  auto AUTORECOVER_ERR = i.AUTORECOVER_ERR.get();
  d[@"AUTORECOVER_ERR"] = @(AUTORECOVER_ERR);
  auto HEAD_OVERHEAT = i.HEAD_OVERHEAT.get();
  d[@"HEAD_OVERHEAT"] = @(HEAD_OVERHEAT);
  auto MOTOR_OVERHEAT = i.MOTOR_OVERHEAT.get();
  d[@"MOTOR_OVERHEAT"] = @(MOTOR_OVERHEAT);
  auto BATTERY_OVERHEAT = i.BATTERY_OVERHEAT.get();
  d[@"BATTERY_OVERHEAT"] = @(BATTERY_OVERHEAT);
  auto WRONG_PAPER = i.WRONG_PAPER.get();
  d[@"WRONG_PAPER"] = @(WRONG_PAPER);
  auto COVER_OPEN = i.COVER_OPEN.get();
  d[@"COVER_OPEN"] = @(COVER_OPEN);
  auto EPOS2_BATTERY_LEVEL_6 = i.EPOS2_BATTERY_LEVEL_6.get();
  d[@"EPOS2_BATTERY_LEVEL_6"] = @(EPOS2_BATTERY_LEVEL_6);
  auto EPOS2_BATTERY_LEVEL_5 = i.EPOS2_BATTERY_LEVEL_5.get();
  d[@"EPOS2_BATTERY_LEVEL_5"] = @(EPOS2_BATTERY_LEVEL_5);
  auto EPOS2_BATTERY_LEVEL_4 = i.EPOS2_BATTERY_LEVEL_4.get();
  d[@"EPOS2_BATTERY_LEVEL_4"] = @(EPOS2_BATTERY_LEVEL_4);
  auto EPOS2_BATTERY_LEVEL_3 = i.EPOS2_BATTERY_LEVEL_3.get();
  d[@"EPOS2_BATTERY_LEVEL_3"] = @(EPOS2_BATTERY_LEVEL_3);
  auto EPOS2_BATTERY_LEVEL_2 = i.EPOS2_BATTERY_LEVEL_2.get();
  d[@"EPOS2_BATTERY_LEVEL_2"] = @(EPOS2_BATTERY_LEVEL_2);
  auto EPOS2_BATTERY_LEVEL_1 = i.EPOS2_BATTERY_LEVEL_1.get();
  d[@"EPOS2_BATTERY_LEVEL_1"] = @(EPOS2_BATTERY_LEVEL_1);
  auto EPOS2_BATTERY_LEVEL_0 = i.EPOS2_BATTERY_LEVEL_0.get();
  d[@"EPOS2_BATTERY_LEVEL_0"] = @(EPOS2_BATTERY_LEVEL_0);
  auto REMOVAL_WAIT_PAPER = i.REMOVAL_WAIT_PAPER.get();
  d[@"REMOVAL_WAIT_PAPER"] = @(REMOVAL_WAIT_PAPER);
  auto REMOVAL_WAIT_NONE = i.REMOVAL_WAIT_NONE.get();
  d[@"REMOVAL_WAIT_NONE"] = @(REMOVAL_WAIT_NONE);
  auto REMOVAL_DETECT_PAPER = i.REMOVAL_DETECT_PAPER.get();
  d[@"REMOVAL_DETECT_PAPER"] = @(REMOVAL_DETECT_PAPER);
  auto REMOVAL_DETECT_PAPER_NONE = i.REMOVAL_DETECT_PAPER_NONE.get();
  d[@"REMOVAL_DETECT_PAPER_NONE"] = @(REMOVAL_DETECT_PAPER_NONE);
  auto REMOVAL_DETECT_UNKNOWN = i.REMOVAL_DETECT_UNKNOWN.get();
  d[@"REMOVAL_DETECT_UNKNOWN"] = @(REMOVAL_DETECT_UNKNOWN);
  auto HIGH_VOLTAGE_ERR = i.HIGH_VOLTAGE_ERR.get();
  d[@"HIGH_VOLTAGE_ERR"] = @(HIGH_VOLTAGE_ERR);
  auto LOW_VOLTAGE_ERR = i.LOW_VOLTAGE_ERR.get();
  d[@"LOW_VOLTAGE_ERR"] = @(LOW_VOLTAGE_ERR);
  auto COLOR_NONE = i.COLOR_NONE.get();
  d[@"COLOR_NONE"] = @(COLOR_NONE);
  auto COLOR_1 = i.COLOR_1.get();
  d[@"COLOR_1"] = @(COLOR_1);
  auto COLOR_2 = i.COLOR_2.get();
  d[@"COLOR_2"] = @(COLOR_2);
  auto COLOR_3 = i.COLOR_3.get();
  d[@"COLOR_3"] = @(COLOR_3);
  auto COLOR_4 = i.COLOR_4.get();
  d[@"COLOR_4"] = @(COLOR_4);
  auto MODE_MONO = i.MODE_MONO.get();
  d[@"MODE_MONO"] = @(MODE_MONO);
  auto MODE_GRAY16 = i.MODE_GRAY16.get();
  d[@"MODE_GRAY16"] = @(MODE_GRAY16);
  auto MODE_MONO_HIGH_DENSITY = i.MODE_MONO_HIGH_DENSITY.get();
  d[@"MODE_MONO_HIGH_DENSITY"] = @(MODE_MONO_HIGH_DENSITY);
  auto HALFTONE_DITHER = i.HALFTONE_DITHER.get();
  d[@"HALFTONE_DITHER"] = @(HALFTONE_DITHER);
  auto HALFTONE_ERROR_DIFFUSION = i.HALFTONE_ERROR_DIFFUSION.get();
  d[@"HALFTONE_ERROR_DIFFUSION"] = @(HALFTONE_ERROR_DIFFUSION);
  auto HALFTONE_THRESHOLD = i.HALFTONE_THRESHOLD.get();
  d[@"HALFTONE_THRESHOLD"] = @(HALFTONE_THRESHOLD);
  auto COMPRESS_DEFLATE = i.COMPRESS_DEFLATE.get();
  d[@"COMPRESS_DEFLATE"] = @(COMPRESS_DEFLATE);
  auto COMPRESS_NONE = i.COMPRESS_NONE.get();
  d[@"COMPRESS_NONE"] = @(COMPRESS_NONE);
  auto COMPRESS_AUTO = i.COMPRESS_AUTO.get();
  d[@"COMPRESS_AUTO"] = @(COMPRESS_AUTO);
  auto BARCODE_UPC_A = i.BARCODE_UPC_A.get();
  d[@"BARCODE_UPC_A"] = @(BARCODE_UPC_A);
  auto BARCODE_UPC_E = i.BARCODE_UPC_E.get();
  d[@"BARCODE_UPC_E"] = @(BARCODE_UPC_E);
  auto BARCODE_EAN13 = i.BARCODE_EAN13.get();
  d[@"BARCODE_EAN13"] = @(BARCODE_EAN13);
  auto BARCODE_JAN13 = i.BARCODE_JAN13.get();
  d[@"BARCODE_JAN13"] = @(BARCODE_JAN13);
  auto BARCODE_EAN8 = i.BARCODE_EAN8.get();
  d[@"BARCODE_EAN8"] = @(BARCODE_EAN8);
  auto BARCODE_JAN8 = i.BARCODE_JAN8.get();
  d[@"BARCODE_JAN8"] = @(BARCODE_JAN8);
  auto BARCODE_CODE39 = i.BARCODE_CODE39.get();
  d[@"BARCODE_CODE39"] = @(BARCODE_CODE39);
  auto BARCODE_ITF = i.BARCODE_ITF.get();
  d[@"BARCODE_ITF"] = @(BARCODE_ITF);
  auto BARCODE_CODABAR = i.BARCODE_CODABAR.get();
  d[@"BARCODE_CODABAR"] = @(BARCODE_CODABAR);
  auto BARCODE_CODE93 = i.BARCODE_CODE93.get();
  d[@"BARCODE_CODE93"] = @(BARCODE_CODE93);
  auto BARCODE_CODE128 = i.BARCODE_CODE128.get();
  d[@"BARCODE_CODE128"] = @(BARCODE_CODE128);
  auto BARCODE_CODE128_AUTO = i.BARCODE_CODE128_AUTO.get();
  d[@"BARCODE_CODE128_AUTO"] = @(BARCODE_CODE128_AUTO);
  auto BARCODE_GS1_128 = i.BARCODE_GS1_128.get();
  d[@"BARCODE_GS1_128"] = @(BARCODE_GS1_128);
  auto BARCODE_GS1_DATABAR_OMNIDIRECTIONAL = i.BARCODE_GS1_DATABAR_OMNIDIRECTIONAL.get();
  d[@"BARCODE_GS1_DATABAR_OMNIDIRECTIONAL"] = @(BARCODE_GS1_DATABAR_OMNIDIRECTIONAL);
  auto BARCODE_GS1_DATABAR_TRUNCATED = i.BARCODE_GS1_DATABAR_TRUNCATED.get();
  d[@"BARCODE_GS1_DATABAR_TRUNCATED"] = @(BARCODE_GS1_DATABAR_TRUNCATED);
  auto BARCODE_GS1_DATABAR_LIMITED = i.BARCODE_GS1_DATABAR_LIMITED.get();
  d[@"BARCODE_GS1_DATABAR_LIMITED"] = @(BARCODE_GS1_DATABAR_LIMITED);
  auto BARCODE_GS1_DATABAR_EXPANDED = i.BARCODE_GS1_DATABAR_EXPANDED.get();
  d[@"BARCODE_GS1_DATABAR_EXPANDED"] = @(BARCODE_GS1_DATABAR_EXPANDED);
  auto HRI_NONE = i.HRI_NONE.get();
  d[@"HRI_NONE"] = @(HRI_NONE);
  auto HRI_ABOVE = i.HRI_ABOVE.get();
  d[@"HRI_ABOVE"] = @(HRI_ABOVE);
  auto HRI_BELOW = i.HRI_BELOW.get();
  d[@"HRI_BELOW"] = @(HRI_BELOW);
  auto HRI_BOTH = i.HRI_BOTH.get();
  d[@"HRI_BOTH"] = @(HRI_BOTH);
  auto FONT_A = i.FONT_A.get();
  d[@"FONT_A"] = @(FONT_A);
  auto FONT_B = i.FONT_B.get();
  d[@"FONT_B"] = @(FONT_B);
  auto FONT_C = i.FONT_C.get();
  d[@"FONT_C"] = @(FONT_C);
  auto FONT_D = i.FONT_D.get();
  d[@"FONT_D"] = @(FONT_D);
  auto FONT_E = i.FONT_E.get();
  d[@"FONT_E"] = @(FONT_E);
  auto SYMBOL_PDF417_STANDARD = i.SYMBOL_PDF417_STANDARD.get();
  d[@"SYMBOL_PDF417_STANDARD"] = @(SYMBOL_PDF417_STANDARD);
  auto SYMBOL_PDF417_TRUNCATED = i.SYMBOL_PDF417_TRUNCATED.get();
  d[@"SYMBOL_PDF417_TRUNCATED"] = @(SYMBOL_PDF417_TRUNCATED);
  auto SYMBOL_QRCODE_MODEL_1 = i.SYMBOL_QRCODE_MODEL_1.get();
  d[@"SYMBOL_QRCODE_MODEL_1"] = @(SYMBOL_QRCODE_MODEL_1);
  auto SYMBOL_QRCODE_MODEL_2 = i.SYMBOL_QRCODE_MODEL_2.get();
  d[@"SYMBOL_QRCODE_MODEL_2"] = @(SYMBOL_QRCODE_MODEL_2);
  auto SYMBOL_QRCODE_MICRO = i.SYMBOL_QRCODE_MICRO.get();
  d[@"SYMBOL_QRCODE_MICRO"] = @(SYMBOL_QRCODE_MICRO);
  auto SYMBOL_MAXICODE_MODE_2 = i.SYMBOL_MAXICODE_MODE_2.get();
  d[@"SYMBOL_MAXICODE_MODE_2"] = @(SYMBOL_MAXICODE_MODE_2);
  auto SYMBOL_MAXICODE_MODE_3 = i.SYMBOL_MAXICODE_MODE_3.get();
  d[@"SYMBOL_MAXICODE_MODE_3"] = @(SYMBOL_MAXICODE_MODE_3);
  auto SYMBOL_MAXICODE_MODE_4 = i.SYMBOL_MAXICODE_MODE_4.get();
  d[@"SYMBOL_MAXICODE_MODE_4"] = @(SYMBOL_MAXICODE_MODE_4);
  auto SYMBOL_MAXICODE_MODE_5 = i.SYMBOL_MAXICODE_MODE_5.get();
  d[@"SYMBOL_MAXICODE_MODE_5"] = @(SYMBOL_MAXICODE_MODE_5);
  auto SYMBOL_MAXICODE_MODE_6 = i.SYMBOL_MAXICODE_MODE_6.get();
  d[@"SYMBOL_MAXICODE_MODE_6"] = @(SYMBOL_MAXICODE_MODE_6);
  auto SYMBOL_GS1_DATABAR_STACKED = i.SYMBOL_GS1_DATABAR_STACKED.get();
  d[@"SYMBOL_GS1_DATABAR_STACKED"] = @(SYMBOL_GS1_DATABAR_STACKED);
  auto SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL = i.SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL.get();
  d[@"SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL"] = @(SYMBOL_GS1_DATABAR_STACKED_OMNIDIRECTIONAL);
  auto SYMBOL_GS1_DATABAR_EXPANDED_STACKED = i.SYMBOL_GS1_DATABAR_EXPANDED_STACKED.get();
  d[@"SYMBOL_GS1_DATABAR_EXPANDED_STACKED"] = @(SYMBOL_GS1_DATABAR_EXPANDED_STACKED);
  auto SYMBOL_AZTECCODE_FULLRANGE = i.SYMBOL_AZTECCODE_FULLRANGE.get();
  d[@"SYMBOL_AZTECCODE_FULLRANGE"] = @(SYMBOL_AZTECCODE_FULLRANGE);
  auto SYMBOL_AZTECCODE_COMPACT = i.SYMBOL_AZTECCODE_COMPACT.get();
  d[@"SYMBOL_AZTECCODE_COMPACT"] = @(SYMBOL_AZTECCODE_COMPACT);
  auto SYMBOL_DATAMATRIX_SQUARE = i.SYMBOL_DATAMATRIX_SQUARE.get();
  d[@"SYMBOL_DATAMATRIX_SQUARE"] = @(SYMBOL_DATAMATRIX_SQUARE);
  auto SYMBOL_DATAMATRIX_RECTANGLE_8 = i.SYMBOL_DATAMATRIX_RECTANGLE_8.get();
  d[@"SYMBOL_DATAMATRIX_RECTANGLE_8"] = @(SYMBOL_DATAMATRIX_RECTANGLE_8);
  auto SYMBOL_DATAMATRIX_RECTANGLE_12 = i.SYMBOL_DATAMATRIX_RECTANGLE_12.get();
  d[@"SYMBOL_DATAMATRIX_RECTANGLE_12"] = @(SYMBOL_DATAMATRIX_RECTANGLE_12);
  auto SYMBOL_DATAMATRIX_RECTANGLE_16 = i.SYMBOL_DATAMATRIX_RECTANGLE_16.get();
  d[@"SYMBOL_DATAMATRIX_RECTANGLE_16"] = @(SYMBOL_DATAMATRIX_RECTANGLE_16);
  auto LEVEL_0 = i.LEVEL_0.get();
  d[@"LEVEL_0"] = @(LEVEL_0);
  auto LEVEL_1 = i.LEVEL_1.get();
  d[@"LEVEL_1"] = @(LEVEL_1);
  auto LEVEL_2 = i.LEVEL_2.get();
  d[@"LEVEL_2"] = @(LEVEL_2);
  auto LEVEL_3 = i.LEVEL_3.get();
  d[@"LEVEL_3"] = @(LEVEL_3);
  auto LEVEL_4 = i.LEVEL_4.get();
  d[@"LEVEL_4"] = @(LEVEL_4);
  auto LEVEL_5 = i.LEVEL_5.get();
  d[@"LEVEL_5"] = @(LEVEL_5);
  auto LEVEL_6 = i.LEVEL_6.get();
  d[@"LEVEL_6"] = @(LEVEL_6);
  auto LEVEL_7 = i.LEVEL_7.get();
  d[@"LEVEL_7"] = @(LEVEL_7);
  auto LEVEL_8 = i.LEVEL_8.get();
  d[@"LEVEL_8"] = @(LEVEL_8);
  auto LEVEL_L = i.LEVEL_L.get();
  d[@"LEVEL_L"] = @(LEVEL_L);
  auto LEVEL_M = i.LEVEL_M.get();
  d[@"LEVEL_M"] = @(LEVEL_M);
  auto LEVEL_Q = i.LEVEL_Q.get();
  d[@"LEVEL_Q"] = @(LEVEL_Q);
  auto LEVEL_H = i.LEVEL_H.get();
  d[@"LEVEL_H"] = @(LEVEL_H);
  auto DRAWER_2PIN = i.DRAWER_2PIN.get();
  d[@"DRAWER_2PIN"] = @(DRAWER_2PIN);
  auto DRAWER_5PIN = i.DRAWER_5PIN.get();
  d[@"DRAWER_5PIN"] = @(DRAWER_5PIN);
  auto PULSE_100 = i.PULSE_100.get();
  d[@"PULSE_100"] = @(PULSE_100);
  auto PULSE_200 = i.PULSE_200.get();
  d[@"PULSE_200"] = @(PULSE_200);
  auto PULSE_300 = i.PULSE_300.get();
  d[@"PULSE_300"] = @(PULSE_300);
  auto PULSE_400 = i.PULSE_400.get();
  d[@"PULSE_400"] = @(PULSE_400);
  auto PULSE_500 = i.PULSE_500.get();
  d[@"PULSE_500"] = @(PULSE_500);
  auto ALIGN_LEFT = i.ALIGN_LEFT.get();
  d[@"ALIGN_LEFT"] = @(ALIGN_LEFT);
  auto ALIGN_CENTER = i.ALIGN_CENTER.get();
  d[@"ALIGN_CENTER"] = @(ALIGN_CENTER);
  auto ALIGN_RIGHT = i.ALIGN_RIGHT.get();
  d[@"ALIGN_RIGHT"] = @(ALIGN_RIGHT);
  auto LANG_EN = i.LANG_EN.get();
  d[@"LANG_EN"] = @(LANG_EN);
  auto LANG_JA = i.LANG_JA.get();
  d[@"LANG_JA"] = @(LANG_JA);
  auto LANG_ZH_CN = i.LANG_ZH_CN.get();
  d[@"LANG_ZH_CN"] = @(LANG_ZH_CN);
  auto LANG_ZH_TW = i.LANG_ZH_TW.get();
  d[@"LANG_ZH_TW"] = @(LANG_ZH_TW);
  auto LANG_KO = i.LANG_KO.get();
  d[@"LANG_KO"] = @(LANG_KO);
  auto LANG_TH = i.LANG_TH.get();
  d[@"LANG_TH"] = @(LANG_TH);
  auto LANG_VI = i.LANG_VI.get();
  d[@"LANG_VI"] = @(LANG_VI);
  auto LANG_MULTI = i.LANG_MULTI.get();
  d[@"LANG_MULTI"] = @(LANG_MULTI);
  return d;
}) {}
inline JS::NativeEscPosPrinter::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
inline JS::NativeEscPosPrinterDiscovery::Constants::Builder::Builder(const Input i) : _factory(^{
  NSMutableDictionary *d = [NSMutableDictionary new];
  auto PORTTYPE_ALL = i.PORTTYPE_ALL.get();
  d[@"PORTTYPE_ALL"] = @(PORTTYPE_ALL);
  auto PORTTYPE_TCP = i.PORTTYPE_TCP.get();
  d[@"PORTTYPE_TCP"] = @(PORTTYPE_TCP);
  auto PORTTYPE_BLUETOOTH = i.PORTTYPE_BLUETOOTH.get();
  d[@"PORTTYPE_BLUETOOTH"] = @(PORTTYPE_BLUETOOTH);
  auto PORTTYPE_USB = i.PORTTYPE_USB.get();
  d[@"PORTTYPE_USB"] = @(PORTTYPE_USB);
  auto PORTTYPE_BLUETOOTH_LE = i.PORTTYPE_BLUETOOTH_LE.get();
  d[@"PORTTYPE_BLUETOOTH_LE"] = @(PORTTYPE_BLUETOOTH_LE);
  auto MODEL_ALL = i.MODEL_ALL.get();
  d[@"MODEL_ALL"] = @(MODEL_ALL);
  auto TYPE_ALL = i.TYPE_ALL.get();
  d[@"TYPE_ALL"] = @(TYPE_ALL);
  auto TYPE_PRINTER = i.TYPE_PRINTER.get();
  d[@"TYPE_PRINTER"] = @(TYPE_PRINTER);
  auto TYPE_HYBRID_PRINTER = i.TYPE_HYBRID_PRINTER.get();
  d[@"TYPE_HYBRID_PRINTER"] = @(TYPE_HYBRID_PRINTER);
  auto TYPE_DISPLAY = i.TYPE_DISPLAY.get();
  d[@"TYPE_DISPLAY"] = @(TYPE_DISPLAY);
  auto TYPE_KEYBOARD = i.TYPE_KEYBOARD.get();
  d[@"TYPE_KEYBOARD"] = @(TYPE_KEYBOARD);
  auto TYPE_SCANNER = i.TYPE_SCANNER.get();
  d[@"TYPE_SCANNER"] = @(TYPE_SCANNER);
  auto TYPE_SERIAL = i.TYPE_SERIAL.get();
  d[@"TYPE_SERIAL"] = @(TYPE_SERIAL);
  auto TYPE_POS_KEYBOARD = i.TYPE_POS_KEYBOARD.get();
  d[@"TYPE_POS_KEYBOARD"] = @(TYPE_POS_KEYBOARD);
  auto TYPE_MSR = i.TYPE_MSR.get();
  d[@"TYPE_MSR"] = @(TYPE_MSR);
  auto TYPE_GFE = i.TYPE_GFE.get();
  d[@"TYPE_GFE"] = @(TYPE_GFE);
  auto TYPE_OTHER_PERIPHERAL = i.TYPE_OTHER_PERIPHERAL.get();
  d[@"TYPE_OTHER_PERIPHERAL"] = @(TYPE_OTHER_PERIPHERAL);
  auto ERR_PARAM = i.ERR_PARAM.get();
  d[@"ERR_PARAM"] = @(ERR_PARAM);
  auto ERR_ILLEGAL = i.ERR_ILLEGAL.get();
  d[@"ERR_ILLEGAL"] = @(ERR_ILLEGAL);
  auto ERR_MEMORY = i.ERR_MEMORY.get();
  d[@"ERR_MEMORY"] = @(ERR_MEMORY);
  auto ERR_FAILURE = i.ERR_FAILURE.get();
  d[@"ERR_FAILURE"] = @(ERR_FAILURE);
  auto ERR_PROCESSING = i.ERR_PROCESSING.get();
  d[@"ERR_PROCESSING"] = @(ERR_PROCESSING);
  auto BT_ERR_PARAM = i.BT_ERR_PARAM.get();
  d[@"BT_ERR_PARAM"] = @(BT_ERR_PARAM);
  auto BT_ERR_UNSUPPORTED = i.BT_ERR_UNSUPPORTED.get();
  d[@"BT_ERR_UNSUPPORTED"] = @(BT_ERR_UNSUPPORTED);
  auto BT_ERR_CANCEL = i.BT_ERR_CANCEL.get();
  d[@"BT_ERR_CANCEL"] = @(BT_ERR_CANCEL);
  auto BT_ERR_ILLEGAL_DEVICE = i.BT_ERR_ILLEGAL_DEVICE.get();
  d[@"BT_ERR_ILLEGAL_DEVICE"] = @(BT_ERR_ILLEGAL_DEVICE);
  auto FILTER_NONE = i.FILTER_NONE.get();
  d[@"FILTER_NONE"] = @(FILTER_NONE);
  auto FILTER_NAME = i.FILTER_NAME.get();
  d[@"FILTER_NAME"] = @(FILTER_NAME);
  auto PRINTER_TRUE = i.PRINTER_TRUE.get();
  d[@"PRINTER_TRUE"] = @(PRINTER_TRUE);
  auto PRINTER_FALSE = i.PRINTER_FALSE.get();
  d[@"PRINTER_FALSE"] = @(PRINTER_FALSE);
  return d;
}) {}
inline JS::NativeEscPosPrinterDiscovery::Constants::Builder::Builder(Constants i) : _factory(^{
  return i.unsafeRawValue();
}) {}
#endif // RNEspPosPrinterSpec_H

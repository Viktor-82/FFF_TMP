/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeEscPosPrinterCxxSpecJSI : public TurboModule {
protected:
  NativeEscPosPrinterCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
  virtual jsi::Value initWithPrinterDeviceName(jsi::Runtime &rt, jsi::String target, jsi::String deviceName, double lang) = 0;
  virtual jsi::Value connect(jsi::Runtime &rt, jsi::String target, double timeout) = 0;
  virtual jsi::Value disconnect(jsi::Runtime &rt, jsi::String target) = 0;
  virtual jsi::Value clearCommandBuffer(jsi::Runtime &rt, jsi::String target) = 0;
  virtual jsi::Value addText(jsi::Runtime &rt, jsi::String target, jsi::String data) = 0;
  virtual jsi::Value addTextLang(jsi::Runtime &rt, jsi::String target, double lang) = 0;
  virtual jsi::Value addFeedLine(jsi::Runtime &rt, jsi::String target, double line) = 0;
  virtual jsi::Value addLineSpace(jsi::Runtime &rt, jsi::String target, double linespc) = 0;
  virtual jsi::Value addCut(jsi::Runtime &rt, jsi::String target, double type) = 0;
  virtual jsi::Value sendData(jsi::Runtime &rt, jsi::String target, double timeout) = 0;
  virtual jsi::Value getPrinterSetting(jsi::Runtime &rt, jsi::String target, double timeout, double type) = 0;
  virtual jsi::Value getStatus(jsi::Runtime &rt, jsi::String target) = 0;
  virtual jsi::Value addImage(jsi::Runtime &rt, jsi::String target, jsi::Object source, double width, double color, double mode, double halftone, double brightness, double compress) = 0;
  virtual jsi::Value addBarcode(jsi::Runtime &rt, jsi::String target, jsi::String data, double type, double hri, double font, double width, double height) = 0;
  virtual jsi::Value addSymbol(jsi::Runtime &rt, jsi::String target, jsi::String data, double type, double level, double width, double height, double size) = 0;
  virtual jsi::Value addCommand(jsi::Runtime &rt, jsi::String target, jsi::String data) = 0;
  virtual jsi::Value addPulse(jsi::Runtime &rt, jsi::String target, double drawer, double time) = 0;
  virtual jsi::Value addTextAlign(jsi::Runtime &rt, jsi::String target, double align) = 0;
  virtual jsi::Value addTextSize(jsi::Runtime &rt, jsi::String target, double width, double height) = 0;
  virtual jsi::Value addTextSmooth(jsi::Runtime &rt, jsi::String target, double smooth) = 0;
  virtual jsi::Value addTextStyle(jsi::Runtime &rt, jsi::String target, double reverse, double ul, double em, double color) = 0;

};

template <typename T>
class JSI_EXPORT NativeEscPosPrinterCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "EscPosPrinter";

protected:
  NativeEscPosPrinterCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeEscPosPrinterCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeEscPosPrinterCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeEscPosPrinterCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Object getConstants(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getConstants) == 1,
          "Expected getConstants(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getConstants, jsInvoker_, instance_);
    }
    jsi::Value initWithPrinterDeviceName(jsi::Runtime &rt, jsi::String target, jsi::String deviceName, double lang) override {
      static_assert(
          bridging::getParameterCount(&T::initWithPrinterDeviceName) == 4,
          "Expected initWithPrinterDeviceName(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initWithPrinterDeviceName, jsInvoker_, instance_, std::move(target), std::move(deviceName), std::move(lang));
    }
    jsi::Value connect(jsi::Runtime &rt, jsi::String target, double timeout) override {
      static_assert(
          bridging::getParameterCount(&T::connect) == 3,
          "Expected connect(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::connect, jsInvoker_, instance_, std::move(target), std::move(timeout));
    }
    jsi::Value disconnect(jsi::Runtime &rt, jsi::String target) override {
      static_assert(
          bridging::getParameterCount(&T::disconnect) == 2,
          "Expected disconnect(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::disconnect, jsInvoker_, instance_, std::move(target));
    }
    jsi::Value clearCommandBuffer(jsi::Runtime &rt, jsi::String target) override {
      static_assert(
          bridging::getParameterCount(&T::clearCommandBuffer) == 2,
          "Expected clearCommandBuffer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::clearCommandBuffer, jsInvoker_, instance_, std::move(target));
    }
    jsi::Value addText(jsi::Runtime &rt, jsi::String target, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::addText) == 3,
          "Expected addText(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addText, jsInvoker_, instance_, std::move(target), std::move(data));
    }
    jsi::Value addTextLang(jsi::Runtime &rt, jsi::String target, double lang) override {
      static_assert(
          bridging::getParameterCount(&T::addTextLang) == 3,
          "Expected addTextLang(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addTextLang, jsInvoker_, instance_, std::move(target), std::move(lang));
    }
    jsi::Value addFeedLine(jsi::Runtime &rt, jsi::String target, double line) override {
      static_assert(
          bridging::getParameterCount(&T::addFeedLine) == 3,
          "Expected addFeedLine(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addFeedLine, jsInvoker_, instance_, std::move(target), std::move(line));
    }
    jsi::Value addLineSpace(jsi::Runtime &rt, jsi::String target, double linespc) override {
      static_assert(
          bridging::getParameterCount(&T::addLineSpace) == 3,
          "Expected addLineSpace(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addLineSpace, jsInvoker_, instance_, std::move(target), std::move(linespc));
    }
    jsi::Value addCut(jsi::Runtime &rt, jsi::String target, double type) override {
      static_assert(
          bridging::getParameterCount(&T::addCut) == 3,
          "Expected addCut(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addCut, jsInvoker_, instance_, std::move(target), std::move(type));
    }
    jsi::Value sendData(jsi::Runtime &rt, jsi::String target, double timeout) override {
      static_assert(
          bridging::getParameterCount(&T::sendData) == 3,
          "Expected sendData(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::sendData, jsInvoker_, instance_, std::move(target), std::move(timeout));
    }
    jsi::Value getPrinterSetting(jsi::Runtime &rt, jsi::String target, double timeout, double type) override {
      static_assert(
          bridging::getParameterCount(&T::getPrinterSetting) == 4,
          "Expected getPrinterSetting(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getPrinterSetting, jsInvoker_, instance_, std::move(target), std::move(timeout), std::move(type));
    }
    jsi::Value getStatus(jsi::Runtime &rt, jsi::String target) override {
      static_assert(
          bridging::getParameterCount(&T::getStatus) == 2,
          "Expected getStatus(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getStatus, jsInvoker_, instance_, std::move(target));
    }
    jsi::Value addImage(jsi::Runtime &rt, jsi::String target, jsi::Object source, double width, double color, double mode, double halftone, double brightness, double compress) override {
      static_assert(
          bridging::getParameterCount(&T::addImage) == 9,
          "Expected addImage(...) to have 9 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addImage, jsInvoker_, instance_, std::move(target), std::move(source), std::move(width), std::move(color), std::move(mode), std::move(halftone), std::move(brightness), std::move(compress));
    }
    jsi::Value addBarcode(jsi::Runtime &rt, jsi::String target, jsi::String data, double type, double hri, double font, double width, double height) override {
      static_assert(
          bridging::getParameterCount(&T::addBarcode) == 8,
          "Expected addBarcode(...) to have 8 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addBarcode, jsInvoker_, instance_, std::move(target), std::move(data), std::move(type), std::move(hri), std::move(font), std::move(width), std::move(height));
    }
    jsi::Value addSymbol(jsi::Runtime &rt, jsi::String target, jsi::String data, double type, double level, double width, double height, double size) override {
      static_assert(
          bridging::getParameterCount(&T::addSymbol) == 8,
          "Expected addSymbol(...) to have 8 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addSymbol, jsInvoker_, instance_, std::move(target), std::move(data), std::move(type), std::move(level), std::move(width), std::move(height), std::move(size));
    }
    jsi::Value addCommand(jsi::Runtime &rt, jsi::String target, jsi::String data) override {
      static_assert(
          bridging::getParameterCount(&T::addCommand) == 3,
          "Expected addCommand(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addCommand, jsInvoker_, instance_, std::move(target), std::move(data));
    }
    jsi::Value addPulse(jsi::Runtime &rt, jsi::String target, double drawer, double time) override {
      static_assert(
          bridging::getParameterCount(&T::addPulse) == 4,
          "Expected addPulse(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addPulse, jsInvoker_, instance_, std::move(target), std::move(drawer), std::move(time));
    }
    jsi::Value addTextAlign(jsi::Runtime &rt, jsi::String target, double align) override {
      static_assert(
          bridging::getParameterCount(&T::addTextAlign) == 3,
          "Expected addTextAlign(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addTextAlign, jsInvoker_, instance_, std::move(target), std::move(align));
    }
    jsi::Value addTextSize(jsi::Runtime &rt, jsi::String target, double width, double height) override {
      static_assert(
          bridging::getParameterCount(&T::addTextSize) == 4,
          "Expected addTextSize(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addTextSize, jsInvoker_, instance_, std::move(target), std::move(width), std::move(height));
    }
    jsi::Value addTextSmooth(jsi::Runtime &rt, jsi::String target, double smooth) override {
      static_assert(
          bridging::getParameterCount(&T::addTextSmooth) == 3,
          "Expected addTextSmooth(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addTextSmooth, jsInvoker_, instance_, std::move(target), std::move(smooth));
    }
    jsi::Value addTextStyle(jsi::Runtime &rt, jsi::String target, double reverse, double ul, double em, double color) override {
      static_assert(
          bridging::getParameterCount(&T::addTextStyle) == 6,
          "Expected addTextStyle(...) to have 6 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::addTextStyle, jsInvoker_, instance_, std::move(target), std::move(reverse), std::move(ul), std::move(em), std::move(color));
    }

  private:
    friend class NativeEscPosPrinterCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};


  class JSI_EXPORT NativeEscPosPrinterDiscoveryCxxSpecJSI : public TurboModule {
protected:
  NativeEscPosPrinterDiscoveryCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
  virtual jsi::Value startDiscovery(jsi::Runtime &rt, jsi::Object filterOption) = 0;
  virtual jsi::Value stopDiscovery(jsi::Runtime &rt) = 0;
  virtual jsi::Value enableLocationSetting(jsi::Runtime &rt) = 0;
  virtual jsi::Value pairBluetoothDevice(jsi::Runtime &rt, jsi::String macAddress) = 0;

};

template <typename T>
class JSI_EXPORT NativeEscPosPrinterDiscoveryCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "EscPosPrinterDiscovery";

protected:
  NativeEscPosPrinterDiscoveryCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeEscPosPrinterDiscoveryCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

  template <typename OnDiscoveryType> void emitOnDiscovery(std::vector<OnDiscoveryType> value) {
    static_assert(bridging::supportsFromJs<std::vector<OnDiscoveryType>, jsi::Array>, "value cannnot be converted to jsi::Array");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onDiscovery"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  void emitEnableLocationSettingSuccess() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["enableLocationSettingSuccess"]).emit();
  }

  void emitEnableLocationSettingFailure() {
    static_cast<AsyncEventEmitter<>&>(*delegate_.eventEmitterMap_["enableLocationSettingFailure"]).emit();
  }

private:
  class Delegate : public NativeEscPosPrinterDiscoveryCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeEscPosPrinterDiscoveryCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
      eventEmitterMap_["onDiscovery"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["enableLocationSettingSuccess"] = std::make_shared<AsyncEventEmitter<>>();
      eventEmitterMap_["enableLocationSettingFailure"] = std::make_shared<AsyncEventEmitter<>>();
    }

    jsi::Object getConstants(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getConstants) == 1,
          "Expected getConstants(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getConstants, jsInvoker_, instance_);
    }
    jsi::Value startDiscovery(jsi::Runtime &rt, jsi::Object filterOption) override {
      static_assert(
          bridging::getParameterCount(&T::startDiscovery) == 2,
          "Expected startDiscovery(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::startDiscovery, jsInvoker_, instance_, std::move(filterOption));
    }
    jsi::Value stopDiscovery(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopDiscovery) == 1,
          "Expected stopDiscovery(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stopDiscovery, jsInvoker_, instance_);
    }
    jsi::Value enableLocationSetting(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::enableLocationSetting) == 1,
          "Expected enableLocationSetting(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::enableLocationSetting, jsInvoker_, instance_);
    }
    jsi::Value pairBluetoothDevice(jsi::Runtime &rt, jsi::String macAddress) override {
      static_assert(
          bridging::getParameterCount(&T::pairBluetoothDevice) == 2,
          "Expected pairBluetoothDevice(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pairBluetoothDevice, jsInvoker_, instance_, std::move(macAddress));
    }

  private:
    friend class NativeEscPosPrinterDiscoveryCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react

/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNEspPosPrinterSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_initWithPrinterDeviceName(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->initWithPrinterDeviceName(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_connect(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->connect(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_disconnect(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->disconnect(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_clearCommandBuffer(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->clearCommandBuffer(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addText(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addText(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextLang(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addTextLang(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addFeedLine(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addFeedLine(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addLineSpace(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addLineSpace(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addCut(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addCut(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_sendData(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->sendData(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_getPrinterSetting(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->getPrinterSetting(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_getStatus(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->getStatus(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addImage(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addImage(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asObject(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber(),
    count <= 5 ? throw jsi::JSError(rt, "Expected argument in position 5 to be passed") : args[5].asNumber(),
    count <= 6 ? throw jsi::JSError(rt, "Expected argument in position 6 to be passed") : args[6].asNumber(),
    count <= 7 ? throw jsi::JSError(rt, "Expected argument in position 7 to be passed") : args[7].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addBarcode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addBarcode(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber(),
    count <= 5 ? throw jsi::JSError(rt, "Expected argument in position 5 to be passed") : args[5].asNumber(),
    count <= 6 ? throw jsi::JSError(rt, "Expected argument in position 6 to be passed") : args[6].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addSymbol(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addSymbol(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber(),
    count <= 5 ? throw jsi::JSError(rt, "Expected argument in position 5 to be passed") : args[5].asNumber(),
    count <= 6 ? throw jsi::JSError(rt, "Expected argument in position 6 to be passed") : args[6].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addCommand(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addCommand(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addPulse(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addPulse(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextAlign(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addTextAlign(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextSize(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addTextSize(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextSmooth(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addTextSmooth(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextStyle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterCxxSpecJSI *>(&turboModule)->addTextStyle(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber(),
    count <= 2 ? throw jsi::JSError(rt, "Expected argument in position 2 to be passed") : args[2].asNumber(),
    count <= 3 ? throw jsi::JSError(rt, "Expected argument in position 3 to be passed") : args[3].asNumber(),
    count <= 4 ? throw jsi::JSError(rt, "Expected argument in position 4 to be passed") : args[4].asNumber()
  );
}

NativeEscPosPrinterCxxSpecJSI::NativeEscPosPrinterCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("EscPosPrinter", jsInvoker) {
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeEscPosPrinterCxxSpecJSI_getConstants};
  methodMap_["initWithPrinterDeviceName"] = MethodMetadata {3, __hostFunction_NativeEscPosPrinterCxxSpecJSI_initWithPrinterDeviceName};
  methodMap_["connect"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_connect};
  methodMap_["disconnect"] = MethodMetadata {1, __hostFunction_NativeEscPosPrinterCxxSpecJSI_disconnect};
  methodMap_["clearCommandBuffer"] = MethodMetadata {1, __hostFunction_NativeEscPosPrinterCxxSpecJSI_clearCommandBuffer};
  methodMap_["addText"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addText};
  methodMap_["addTextLang"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextLang};
  methodMap_["addFeedLine"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addFeedLine};
  methodMap_["addLineSpace"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addLineSpace};
  methodMap_["addCut"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addCut};
  methodMap_["sendData"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_sendData};
  methodMap_["getPrinterSetting"] = MethodMetadata {3, __hostFunction_NativeEscPosPrinterCxxSpecJSI_getPrinterSetting};
  methodMap_["getStatus"] = MethodMetadata {1, __hostFunction_NativeEscPosPrinterCxxSpecJSI_getStatus};
  methodMap_["addImage"] = MethodMetadata {8, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addImage};
  methodMap_["addBarcode"] = MethodMetadata {7, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addBarcode};
  methodMap_["addSymbol"] = MethodMetadata {7, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addSymbol};
  methodMap_["addCommand"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addCommand};
  methodMap_["addPulse"] = MethodMetadata {3, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addPulse};
  methodMap_["addTextAlign"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextAlign};
  methodMap_["addTextSize"] = MethodMetadata {3, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextSize};
  methodMap_["addTextSmooth"] = MethodMetadata {2, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextSmooth};
  methodMap_["addTextStyle"] = MethodMetadata {5, __hostFunction_NativeEscPosPrinterCxxSpecJSI_addTextStyle};
}
static jsi::Value __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterDiscoveryCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_startDiscovery(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterDiscoveryCxxSpecJSI *>(&turboModule)->startDiscovery(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_stopDiscovery(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterDiscoveryCxxSpecJSI *>(&turboModule)->stopDiscovery(
    rt
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_enableLocationSetting(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterDiscoveryCxxSpecJSI *>(&turboModule)->enableLocationSetting(
    rt
  );
}
static jsi::Value __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_pairBluetoothDevice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeEscPosPrinterDiscoveryCxxSpecJSI *>(&turboModule)->pairBluetoothDevice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}

NativeEscPosPrinterDiscoveryCxxSpecJSI::NativeEscPosPrinterDiscoveryCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("EscPosPrinterDiscovery", jsInvoker) {
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_getConstants};
  methodMap_["startDiscovery"] = MethodMetadata {1, __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_startDiscovery};
  methodMap_["stopDiscovery"] = MethodMetadata {0, __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_stopDiscovery};
  methodMap_["enableLocationSetting"] = MethodMetadata {0, __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_enableLocationSetting};
  methodMap_["pairBluetoothDevice"] = MethodMetadata {1, __hostFunction_NativeEscPosPrinterDiscoveryCxxSpecJSI_pairBluetoothDevice};
}


} // namespace facebook::react
